@page "/coffee"
@inject NavigationManager NavigationManager
@inject CoffeeServices CoffeeServices
@inject OrderItemServices OrderItemServices
@inject ISnackbar Snackbar

<MudTable Items="@Elements" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Coffee</MudText>
        <MudSpacer />
        @* <MudTextField Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField> *@
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Coffee name</MudTh>
        <MudTh>Price</MudTh>
        <MudTh>Action</MudTh>
        
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.CoffeeName</MudTd>
            <MudTd DataLabel="Sign">@context.Price</MudTd>
            <MudTd DataLabel="Action">
                <MudIconButton Icon="@Icons.Material.Filled.ShoppingCart" aria-label="Cart"
                               OnClick="@(() => AddItemInCart(context.Id, context.Price, context.CoffeeName))">
                </MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Success" aria-label="Edit" OnClick="@(() => edit(context.Id))" Disabled="@isUserStaff">></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" aria-label="Delete" OnClick="@(() => handleDelete(context.Id))" Disabled="@isUserStaff">></MudIconButton>
                
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

@code 
    {


    [CascadingParameter]
    private GlobalState _globalState { get; set; }

    private bool isUserStaff { get; set; }

    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString1 = "";
    private string selectedItem1 = null;


    private IEnumerable<Coffee> Elements = new List<Coffee>();

    protected override void OnInitialized()
    {
        Elements = CoffeeServices.GetCoffeeTableFromJson();
        isUserStaff = _globalState.CurrentUser.Role.ToString() == "staff";
    }

    private void edit(Guid coffeeId)
    {
        NavigationManager.NavigateTo($"/coffee-Table/{coffeeId}");
    }

    private void AddItemInCart(Guid coffeeID, double coffeePrice, string coffeeName)
    {
        OrderItemServices.AddItemInOrderList(_globalState.OrderItems, coffeeID, coffeeName, "coffee", coffeePrice);
        Snackbar.Add($"{coffeeName} is added to the cart", Severity.Success);

    }

    private void handleDelete(Guid coffeeID)
    {
        Elements = CoffeeServices.DeleteCoffeeName(coffeeID);

        Snackbar.Add("Coffee is Deleted Sucessfully", Severity.Success);
    }
} 