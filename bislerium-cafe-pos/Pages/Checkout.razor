@page "/checkout"
@inject CustomerService CustomerService
@inject OrderItemServices OrderItemServices
@inject OrderService OrderService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<style>
    .Buttonclass {
        width: 170px;
        padding: 10px;
        border: none;
        border-radius: 10px;
        background-color: #FFC061;
        color: #ffffff;
        font-weight: bold;
        cursor: pointer;
        margin: 10px;
        transition: background-color 0.2s;
    }

        .Buttonclass:hover {
            background-color: #F89500
        }

    .SecondButton {
        width: 150px;
        padding: 10px;
        border: none;
        border-radius: 10px;

        font-weight: bold;
        cursor: pointer;
        margin: 10px;
       
    }
</style>


@if (_page == 1)
{

    <h5 class="my-4 ml-2">Please Enter your Phone Number to verify Membership</h5>


    <div style="width:400px;" class="ml-2">
        <MudTextField @bind-Value="_customerPhoneNumber" Label="Customer Phone Number" Variant="Variant.Outlined" Class="my-3" InputType="@InputType.Number"></MudTextField>
        @if (!String.IsNullOrEmpty(_errorMessage))
        {
            <MudAlert Severity="Severity.Error" Class="my-2">@_errorMessage</MudAlert>
        }
    </div>

    <MudButton Class="SecondButton" Variant="Variant.Filled" DisableElevation="true" Color="Color.Default" @onclick="@(() => NavigationManager.NavigateTo("/order"))">Go Back</MudButton>

    <MudButton Class="Buttonclass" @onclick="CheckMembership">Check Membership</MudButton>
}

@if (_page == 2)
{
    <MudText Class="ml-2"  Typo="Typo.h6">Please Enter Customer Details</MudText>

    


    <div style="width:400px;" class="mt-5 ml-2">
        
        <MudTextField @bind-Value="_customer.CustomerName" Label="Customer Name" Variant="Variant.Outlined" Class="mb-5"></MudTextField>

        <MudTextField @bind-Value="_customer.CustomerPhoneNumber" Label="Customer Phone Number" Variant="Variant.Outlined" Class="mb-5" ></MudTextField>
        
        <MudTextField @bind-Value="_customer.CustomerAddress" Label="Customer Address" Variant="Variant.Outlined" Class="mb-5" ></MudTextField>

        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <MudAlert Severity="Severity.Error" Class="mt-3 mb-5">@_errorMessage</MudAlert>
        }
    </div>

    <MudButton Variant="Variant.Filled" DisableElevation="true" Color="Color.Default" @onclick="@(() => _page--)" Class="SecondButton">Go Back</MudButton>
    <MudButton Class="Buttonclass" @onclick="validateCustomerDetails">Proceed</MudButton>
}
@if (_page == 3)
{
    <MudContainer>
        <MudCard>
            <MudCardHeader>
                <div style="text-align: center; width: 100%">
                    <MudText Typo="Typo.h4">Bislerum Cafe Bill</MudText>
                </div>
            </MudCardHeader>
             <MudDivider />
                    <MudCardContent>
                        <MudText Typo="Typo.h6">Customer Information:</MudText>
                        <div style="display:flex; flex-direction:row; justify-content: space-between">   
                            <div style="display:flex; flex-direction:column; width: 1000px">
                            
                                <MudItem xs="10" md="2">
                                    <MudText Typo="Typo.body2">Customer Name: @_customer.CustomerName</MudText>
    
                                </MudItem>
                                <MudItem xs="10" md="2">
                                    <MudText Typo="Typo.body2">Phone Number: @_customer.CustomerPhoneNumber</MudText>
                            
                                </MudItem >
                                <MudItem xs="10" md="2">
                                    <MudText Typo="Typo.body2">Address: @_customer.CustomerAddress</MudText>
                            
                                </MudItem>
                                <MudItem xs="10" md="3">
                                    <MudText Typo="Typo.body2">Date: @DateTime.Now</MudText>
                                </MudItem> 
                            
                            </div>
                            <div style="align-items:end; margin-right: 10px">
                                    @if (_totalFreeCoffeeCount != 0)
                                {
                                    <MudText Typo="Typo.body2" Class="ml-5">Total Free Coffees: @_totalFreeCoffeeCount</MudText>
                                    <MudButton Class="Buttonclass" OnClick="HandleFreeCoffeeRedeemption">Reedem</MudButton>
                                }
                            </div>
                        </div>
                    </MudCardContent>

             <MudDivider />


            <MudCardContent>
                    <MudTable Items="@Elements"
                              Dense="@dense"
                              Hover="@hover"
                              Bordered="@bordered"
                              Striped="@striped"
                              Class="border-0 shadow-none">

                        <ToolBarContent>
                            <MudText Typo="Typo.h6">Order Items List</MudText>
                            <MudSpacer />
                        </ToolBarContent>


                        <HeaderContent>
                            <MudTh>Item Name</MudTh>
                            <MudTh>Item Type</MudTh>
                            <MudTh>Price</MudTh>
                            <MudTh>Quantity</MudTh>
                            <MudTh>Total</MudTh>
                        </HeaderContent>


                        <RowTemplate>
                            <MudTd DataLabel="CoffeeType">@context.OrderedItemName</MudTd>
                            <MudTd DataLabel="Item Type">@context.OrderedItemType</MudTd>
                            <MudTd DataLabel="Price">Rs.@context.Price</MudTd>

                            <MudTd DataLabel="Quantity">
                                @context.Quantity
                        </MudTd>

                        <MudTd DataLabel="Price">Rs.@context.TotalPrice</MudTd>

                        </RowTemplate>

                    </MudTable>

                    <div class="d-flex justify-content-between mt-4">

                    <div>
                        <MudText Typo="Typo.subtitle1">Total Amount: <b>Rs.@Math.Round(_totalAmount, 2)</b></MudText>
                        <MudText Typo="Typo.subtitle1">Discount Amount: <b>Rs.@Math.Round(_discountAmount, 2)</b></MudText>
                        <MudDivider DividerType="@DividerType.Middle" />
                        <MudText Typo="Typo.subtitle1">Grand Total: <b>Rs.@Math.Round(_totalAmount - _discountAmount, 2)</b></MudText>
                    </div>
                </div>

            </MudCardContent>

            <MudDivider />



            <MudDivider />

            <div class="py-5 pl-3 mr-5">
                <MudButton Color="Color.Default" Variant="Variant.Filled" Class="SecondButton" OnClick="goBack">Go Back</MudButton>

                <MudButton Class="Buttonclass" OnClick="placeOrder">Place Order</MudButton>
            </div>

        </MudCard>
    </MudContainer>

}

@code {
    //initalizing variables
    [CascadingParameter]
    private GlobalState _globalState { get; set; }

    private IEnumerable<OrderItems> Elements = new List<OrderItems>();
    public double _totalAmount { get; set; } = 0;
    private string _customerPhoneNumber { get; set; }
    private Customer _customer { get; set; }
    private string _errorMessage { set; get; }
    public double DoubleValue { get; set; }

    private int _page = 1;
    private bool _customerIsMemeber { get; set; } = false;

    private int _totalFreeCoffeeCount { get; set; } = 0;
    public double _discountAmount { get; set; } = 0;

    protected override void OnInitialized()
    {
        _globalState.AppBarTitle = "Checkout Page";
        Elements = _globalState.OrderItems;
        _totalAmount = OrderItemServices.CalculateTotalAmount(Elements);
    }

    //Checks if customer is a member
    private void CheckMembership()
    {
        if (string.IsNullOrEmpty(_customerPhoneNumber))
        {
            _errorMessage = "Please enter your phone number";
            return;
        }
        if (!AppUtils.IsNumeric(_customerPhoneNumber))
        {
            _errorMessage = "Please enter correct phone number";
            return;
        }

        _customer = CustomerService.GetCustomerByPhoneNumber(_customerPhoneNumber);

        if (_customer == null)
        {
            Snackbar.Add("Customer has not gotten membership", Severity.Error);
            _customer = new();
            _customer.CustomerPhoneNumber = _customerPhoneNumber;
            _page++;
            return;
        }

        //get memebship benefits if customer is a member
        int totalFreeCoffeeCount = CustomerService.TotalFreeCoffeeCount(_customer.CustomerPhoneNumber);

        if (totalFreeCoffeeCount <= 0)
        {
            _totalFreeCoffeeCount = 0;
        }
        else
        {
            _totalFreeCoffeeCount = totalFreeCoffeeCount - _customer.RedeemedCoffeeCount;
        }


        bool isCustomerRegularMember = CustomerService.IfCustomerIsRegularMember(_customer.CustomerPhoneNumber);

        if(isCustomerRegularMember)
        {
            _discountAmount = _totalAmount * 0.1;
        }
        Snackbar.Add("Customer is a registered memeber", Severity.Success);

        _customerIsMemeber = true;
        _page = 3;
    }


    //validate custoomer membership
    private void validateCustomerDetails()
    {
        if (string.IsNullOrEmpty(_customer.CustomerName) || string.IsNullOrEmpty(_customer.CustomerPhoneNumber) || string.IsNullOrEmpty(_customer.CustomerAddress))
        {
            _errorMessage = "All fields are not filled. Please fill up all the fields";
            return;
        }
        _errorMessage = "";
        _page++;
    }

    private void goBack()
    {
        if (_customerIsMemeber)
        {
            _customerIsMemeber = false;
            _page = 0;
            NavigationManager.NavigateTo("/order");
            return;
        }

        _page--;
    }

    //Process of handling an order,
    private void placeOrder()
    {
        try
        {
            if (!_customerIsMemeber)
            {
                CustomerService.AddCustomer(_customer);
            }


            Order order = new()
                {
                    CustomerID = _customer.CustomerID,
                    CustomerName = _customer.CustomerName,
                    CustomerPhoneNumber = _customer.CustomerPhoneNumber,
                    EmployeeUserName = _globalState.CurrentUser.Username,
                    OrderTotalAmount = Math.Round(_totalAmount, 2),
                    OrderItems = _globalState.OrderItems,
                    DiscountAmount = Math.Round(_discountAmount, 2),
                };


            OrderService.placeOrder(order);
            
            if (_totalFreeCoffeeCount != 0)
            {
                CustomerService.UpdateRedeemedCoffeeCount(_customer.CustomerPhoneNumber, _customer.RedeemedCoffeeCount);
            }
            Snackbar.Add("Order is Placed Sucessfully", Severity.Success);

            _globalState.OrderItems = new List<OrderItems>();

            NavigationManager.NavigateTo("/order");

        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
    }

    // Handles the Coffee Redeemption for every 10 purhcases
    private void HandleFreeCoffeeRedeemption()
    {
        Dictionary<string, double> membershipBenefits = OrderItemServices.ReedeemCoffee(_totalFreeCoffeeCount, _globalState.OrderItems);

        //Converting double to integer
        int redeemedCoffeeCount = (int)membershipBenefits["redeemedCoffeeCount"];
        double discountFromRedeem = membershipBenefits["discount"];

        if (_discountAmount == 0)
        {
            _discountAmount = discountFromRedeem;

        }
        else if ((discountFromRedeem + _discountAmount) > _totalAmount)
        {
            if (_discountAmount > discountFromRedeem)
            {
                Snackbar.Add("Unable to reddem the coffe at the moment", Severity.Error);
                return;
            }
        }



        _customer.RedeemedCoffeeCount = redeemedCoffeeCount;

        Snackbar.Add($"{redeemedCoffeeCount} coffees are redeemed.", Severity.Success);
    }

    //MudTable attributes
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
}
